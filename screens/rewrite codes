//dashboard 
import React, { useState, useEffect, useRef, useContext } from 'react';
import { ScrollView, SafeAreaView, View, StyleSheet } from 'react-native';
import { useSelector } from 'react-redux';
import AssetDataContext from './AssetDataContext';
import Header from './Header';
import MyPortfolio from './MyPortfolio';
import Deposit from './Deposite';
import MyWatchList from './MyWatchList';
import CardItems from './CardItems';
import CriptoAssets from './CriptoAssets';
import ViewPortfolio from './ViewPortfolio';
import SearchBarList from './SearchBarList';

const Dashboard = () => {
    const { token } = useSelector(state => state.auth);
    const { assetData, setAssetData } = useContext(AssetDataContext);
    const [watchlist, setWatchlist] = useState([]);


    const [cardData, setCardData] = useState([
        { name: 'Crypto', value: '', changePercentage: '', color: '', logo: 'https://assets.coingecko.com/coins/images/10365/large/ethereum.png?1606373430', backgroundColor: "#C1C2EB" },
        { name: 'NSE', value: '', changePercentage: '', color: '', logo: 'https://assets.coingecko.com/coins/images/10365/large/ethereum.png?1606373430', backgroundColor: '#B7DDD2' },
        { name: 'BSE', value: '', changePercentage: '', color: '', logo: 'https://assets.coingecko.com/coins/images/10365/large/ethereum.png?1606373430', backgroundColor: "#C1C2EB" },
        { name: 'Commodity', value: '', changePercentage: '', color: '', logo: 'https://assets.coingecko.com/coins/images/10365/large/ethereum.png?1606373430', backgroundColor: '#B7DDD2' }

    ]);
    const [totalValues, setTotalValues] = useState({});
    const [selectedCard, setSelectedCard] = useState('Crypto');
    const scrollViewRef = useRef(null);

    const fetchAssetData = async () => {
        const headers = new Headers({
            "Authorization": `Bearer ${token}`
        });

        const requestOptions = {
            method: 'POST',
            headers: headers,
            redirect: 'follow'
        };

        try {
            const response = await fetch("http://localhost:9000/api/user/getZtokens", requestOptions);
            const result = await response.json();
            setAssetData(result);
        } catch (error) {
            console.error('Failed fetching asset data:', error);
        }
    };

    useEffect(() => {
        fetchAssetData();
    }, []);

    const updateTotalValue = (category, totalValue) => {
        setTotalValues(prev => ({ ...prev, [category]: totalValue }));
    };

    const updateChangePercentage = (category, changePercentage) => {
        setCardData(prev => prev.map(item => item.name === category ? { ...item, changePercentage } : item));
    };

    const scrollToBottom = () => {
        scrollViewRef.current.scrollToEnd({ animated: true });
    };

    return (
        <SafeAreaView style={{ flex: 1 }}>
            <ScrollView ref={scrollViewRef} style={styles.root}>
                <Header assetData={assetData} />
                <MyPortfolio />
                <Deposit />
                <MyWatchList />
                <View style={styles.container5}>
                    {cardData.map((item, index) => (
                        <CardItems
                            key={index}
                            name={item.name}
                            symbl={item.symbl}
                            value={totalValues[item.name] || ''}
                            changePercentage={item.changePercentage}
                            color={item.backgroundColor}
                            onClick={() => setSelectedCard(item.name)}
                        />
                    ))}
                </View>
                <CriptoAssets onScrollToBottom={scrollToBottom} data={watchlist} assetData={assetData}>
                    <ViewPortfolio
                        assetData={assetData}
                        selectedCard={selectedCard}
                        updateTotalValue={updateTotalValue}
                        updateChangePercentage={updateChangePercentage}
                    />
                </CriptoAssets>
            </ScrollView>
        </SafeAreaView>
    );
};

// SearchBarList
import React, { useContext, useState, useEffect } from 'react';
import { View, TextInput, Text, TouchableOpacity, StyleSheet, Image, ScrollView } from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';
import AssetItem from './AssetItem';
import AssetDataContext from './AssetDataContext';
import Modal from 'react-native-modal';
import SeeAllItems from './SeeAllItems';

const SearchBarList = () => {
    const navigation = useNavigation();
    const route = useRoute(); // Remove the redundant declaration
    const { userToken, assetData } = route.params;
    const { addToWatchlist } = useContext(AssetDataContext); // Retrieve assetData from context
    const token = userToken; // Use userToken directly
    const [modalVisible, setModalVisible] = useState(false);
    const [successMessage, setSuccessMessage] = useState('');
    const [searchQuery, setSearchQuery] = useState('');
    const [filteredWatchlist, setFilteredWatchlist] = useState([]);

    const handleBack = () => {
        navigation.goBack();
    };

    const handleFilter = () => {
        // Implement filtering logic if required
    };

    const filterAssets = () => {
        if (!assetData) return;

        const trimmedQuery = searchQuery.replace(/\s+/g, '').toLowerCase();
        const filteredAssets = assetData.filter((item) =>
            item.Name.replace(/\s+/g, '').toLowerCase().includes(trimmedQuery) ||
            item.Tradingsymbol.replace(/\s+/g, '').toLowerCase().includes(trimmedQuery)
        );

        setFilteredWatchlist(filteredAssets);
    };

    const handleAddIconClick = (item) => {
        addToWatchlist(item);
        setSuccessMessage('Added to watchlist successfully');

        setModalVisible(true);

        setTimeout(() => {
            setModalVisible(false);
            setSuccessMessage('');
        }, 3000);
    };

    useEffect(() => {
        if (token) {
            const requestOptions = {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
            };

            fetch("http://localhost:9000/api/user/getZtokens", requestOptions)
                .then((response) => response.json())
                .then((data) => {
                    console.log('Fetched Watchlist Data:', data);
                    setFilteredWatchlist(data);
                    filterAssets();
                })
                .catch((error) => {
                    console.error('Error fetching watchlist data:', error);
                });
        }
    }, [token]);

    return (
        <ScrollView>
            <View style={styles.container}>
                <View style={styles.headerContainer}>
                    <TouchableOpacity onPress={handleBack} style={styles.leftContainer}>
                        <Ionicons name="arrow-back-outline" size={24} color="black" />
                    </TouchableOpacity>
                    <Text style={styles.backText}>Crypto Asset List</Text>
                    <TouchableOpacity onPress={handleFilter} style={styles.rightContainer}>
                        <Image source={require('../assets/filter.png')} style={styles.filterImage} />
                    </TouchableOpacity>
                </View>
                <View style={styles.containerSearchBar}>
                    <TouchableOpacity style={styles.searchBar}>
                        <Ionicons name="search" size={24} color="black" style={styles.searchIcon} />
                        <TextInput
                            style={styles.input}
                            placeholder="Search..."
                            placeholderTextColor="gray"
                            selectionColor="black"
                            autoFocus={true}
                            onChangeText={(text) => setSearchQuery(text)}
                        />
                    </TouchableOpacity>
                </View>
                <View style={styles.containerItem}>
                    {filteredWatchlist.length === 0 && searchQuery !== '' ? (
                        <Text style={styles.noDataMessage}>Data not found</Text>
                    ) : (
                        filteredWatchlist.map((item) => (
                            <AssetItem
                                key={item.ID} // Assuming the assets have a unique ID property
                                name2={item.Tradingsymbol}
                                name3={item.Name}
                                value={item.LastPrice.toString()}
                                decimalValue={0}
                                changePercentage={0}
                                onPress={() => navigation.navigate('AssetListDetails')}
                                onAdd={() => handleAddIconClick(item)}
                                showRemoveIcon={false}
                                showAddIcon={true}
                            />
                        ))
                    )}
                </View>
            </View>

            <Modal isVisible={modalVisible}>
                <View style={styles.modalContent}>
                    <Text style={styles.successMessage}>{successMessage}</Text>
                    <TouchableOpacity onPress={() => setModalVisible(false)}>
                        <Text style={styles.closeButton}>Close</Text>
                    </TouchableOpacity>
                </View>
            </Modal>
        </ScrollView>
    );
};

// SeeAllItems
import React, { useContext, useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, ScrollView, Image, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AssetItem from './AssetItem';
import SuccessModal from './SuccessModal';
import DeleteConfirmationModal from './DeleteConfirmationModal';
import AssetDataContext from '../screens/AssetDataContext';
import AsyncStorage from '@react-native-async-storage/async-storage';


const SeeAllItems = ({ navigation }) => {
    const { assetData, watchlist, removeFromWatchlist } = useContext(AssetDataContext);
    const [successMessage, setSuccessMessage] = useState('');
    const [isSuccessModalVisible, setSuccessModalVisible] = useState(false);
    const [deleteConfirmationVisible, setDeleteConfirmationVisible] = useState(false);
    const [itemToDelete, setItemToDelete] = useState(null);
    const [token, setToken] = useState('');

    const filteredAssetData = assetData.filter((item) =>
        watchlist.some((watchlistItem) => watchlistItem.Tradingsymbol === item.Tradingsymbol)
    );


    const handleBack = () => {
        navigation.navigate('Portfolio');
    };

    const handleFilter = () => {
        // Handle filter functionality here
    };

    // const handleSearchIconClick = () => {
    //   navigation.navigate('SearchBarList', { assetData: assetData });
    // };
    const handleSearchIconClick = () => {
        navigation.navigate('SearchBarList', { userToken: token, assetData: assetData });
    };


    const showDeleteConfirmation = (item) => {
        setItemToDelete(item);
        setDeleteConfirmationVisible(true);
    };

    const confirmDelete = () => {
        if (itemToDelete) {
            removeFromWatchlist(itemToDelete);
            showSuccessModal('Deleted Successfully');
            setDeleteConfirmationVisible(false);
        }
    };

    const cancelDelete = () => {
        setItemToDelete(null);
        setDeleteConfirmationVisible(false);
    };

    const showSuccessModal = (message) => {
        setSuccessMessage(message);
        setSuccessModalVisible(true);

        setTimeout(() => {
            setSuccessModalVisible(false);
            setSuccessMessage('');
        }, 3000);
    };
    useEffect(() => {
        const getToken = async () => {
            try {
                const storedToken = await AsyncStorage.getItem('userToken');
                if (storedToken) {
                    setToken(storedToken);
                }
            } catch (error) {
                console.error('Error retrieving token:', error);
            }
        };
        getToken();
    }, []);

    return (
        <ScrollView>
            <View style={styles.container}>
                <View style={styles.headerContainer}>
                    <TouchableOpacity onPress={handleBack} style={styles.leftContainer}>
                        <Ionicons name="arrow-back-outline" size={24} color="black" marginLeft={-10} />
                    </TouchableOpacity>
                    <Text style={styles.title}>My Watch List</Text>
                    <View style={styles.searchFilterContainer}>
                        <TouchableOpacity onPress={handleSearchIconClick} style={styles.iconContainer}>
                            <Image
                                style={styles.icon}
                                source={require('../assets/mask-group2.svg')}
                            />
                        </TouchableOpacity>
                        <TouchableOpacity onPress={handleFilter} style={styles.iconContainer}>
                            <Image
                                style={styles.icon}
                                source={require('../assets/filter.png')}
                            />
                        </TouchableOpacity>
                    </View>
                </View>

                <View style={styles.containerItem}>
                    {filteredAssetData.map((item, index) => (
                        <AssetItem
                            key={index}
                            name2={item.Tradingsymbol}
                            name3={item.Name}
                            value={item.LastPrice.toString()}
                            decimalValue={0}
                            changePercentage={0}
                            onPress={() => navigation.navigate('ListItemDetails')}
                            onRemove={() => showDeleteConfirmation(item)}
                            showRemoveIcon={true}
                            showAddIcon={false}
                        />
                    ))}
                </View>

                <DeleteConfirmationModal
                    visible={deleteConfirmationVisible}
                    onConfirm={confirmDelete}
                    onCancel={cancelDelete}
                />

                <SuccessModal
                    message={successMessage}
                    visible={isSuccessModalVisible}
                    onClose={() => setSuccessModalVisible(false)}
                />
            </View>
        </ScrollView>
    );
};


// assetdatacontext 
import React, { useState, useEffect, createContext } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const AssetDataContext = createContext();

export const AssetDataProvider = ({ children }) => {
    const [assetData, setAssetData] = useState([]);
    const [watchlist, setWatchlist] = useState([]);
    const [token, setToken] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                let response = await fetch('http://localhost:9000/api/user/getZtokens');
                let data = await response.json();
                setAssetData(data);

                if (data.token) {  // Assuming your API sends the token within the key 'token'
                    setToken(data.token);
                    await AsyncStorage.setItem('userToken', data.token);
                }
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();

        const loadWatchlist = async () => {
            try {
                const storedWatchlist = await AsyncStorage.getItem('watchlist');
                if (storedWatchlist) {
                    setWatchlist(JSON.parse(storedWatchlist));
                }
            } catch (error) {
                console.error('Error loading watchlist from AsyncStorage:', error);
            }
        };

        loadWatchlist();
    }, []);

    useEffect(() => {
        const storeWatchlist = async () => {
            try {
                await AsyncStorage.setItem('watchlist', JSON.stringify(watchlist));
            } catch (error) {
                console.error('Error storing watchlist in AsyncStorage:', error);
            }
        };

        storeWatchlist();
    }, [watchlist]);

    const addToWatchlist = (item) => {
        if (!watchlist.some(watchlistItem => watchlistItem.Tradingsymbol === item.Tradingsymbol)) {
            setWatchlist(prevWatchlist => [...prevWatchlist, item]);
        }
    };

    const removeFromWatchlist = (item) => {
        const newWatchlist = watchlist.filter(
            watchlistItem => watchlistItem.Tradingsymbol !== item.Tradingsymbol
        );
        setWatchlist(newWatchlist);
    };

    return (
        <AssetDataContext.Provider value={{
            assetData, setAssetData, watchlist, addToWatchlist, removeFromWatchlist, token
        }}>
            {children}
        </AssetDataContext.Provider>
    );
};

export default AssetDataContext;